{"version":3,"sources":["index.js"],"names":["Todo","title","id","Math","random","finished","makeObservable","this","observable","toggle","action","TodoList","todos","unfinishedTodoCount","computed","filter","todo","length","TodoListView","observer","todoList","map","TodoView","key","type","checked","onClick","store","render","document","getElementById"],"mappings":"+NAKMA,EAAI,WAKR,WAAYC,GAAQ,yBAJpBC,GAAKC,KAAKC,SAAS,KACnBH,MAAQ,GAAG,KACXI,UAAW,EAGTC,YAAeC,KAAM,CACnBN,MAAOO,IACPH,SAAUG,IACVC,OAAQC,MAEVH,KAAKN,MAAQA,EAKd,OAJA,mCAED,WACEM,KAAKF,UAAYE,KAAKF,aACvB,EAhBO,GAmBJM,EAAQ,WAKZ,WAAYC,GAAQ,yBAJpBA,MAAQ,GAKNN,YAAeC,KAAM,CACnBK,MAAOJ,IACPK,oBAAqBC,MAEvBP,KAAKK,MAAQA,EANd,OAOA,8CATD,WACE,OAAOL,KAAKK,MAAMG,QAAO,SAAAC,GAAI,OAAKA,EAAKX,YAAUY,WAClD,EAJW,GAcRC,EAAeC,aAAS,gBAAGC,EAAQ,EAARA,SAAQ,OACvC,2BACE,0BACGA,EAASR,MAAMS,KAAI,SAAAL,GAAI,OACtB,gBAACM,EAAQ,CAACN,KAAMA,EAAMO,IAAKP,EAAKd,SAE/B,eACQkB,EAASP,wBAIpBS,EAAWH,aAAS,gBAAGH,EAAI,EAAJA,KAAI,OAC/B,0BACE,yBACEQ,KAAK,WACLC,QAAST,EAAKX,SACdqB,QAAS,kBAAMV,EAAKP,YAErBO,EAAKf,UAIJ0B,EAAQ,IAAIhB,EAAS,CACzB,IAAIX,EAAK,cACT,IAAIA,EAAK,wBAEX4B,iBAAO,gBAACV,EAAY,CAACE,SAAUO,IAAWE,SAASC,eAAe,W","file":"static/js/main.59bb606c.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { render } from \"react-dom\";\nimport { observer } from \"mobx-react-lite\";\nimport { makeObservable, observable, computed, action } from \"mobx\";\n\nclass Todo {\n  id = Math.random();\n  title = \"\";\n  finished = false;\n\n  constructor(title) {\n    makeObservable(this, {\n      title: observable,\n      finished: observable,\n      toggle: action\n    });\n    this.title = title;\n  }\n\n  toggle() {\n    this.finished = !this.finished;\n  }\n}\n\nclass TodoList {\n  todos = [];\n  get unfinishedTodoCount() {\n    return this.todos.filter(todo => !todo.finished).length;\n  }\n  constructor(todos) {\n    makeObservable(this, {\n      todos: observable,\n      unfinishedTodoCount: computed\n    });\n    this.todos = todos;\n  }\n}\n\nconst TodoListView = observer(({ todoList }) => (\n  <div>\n    <ul>\n      {todoList.todos.map(todo => (\n        <TodoView todo={todo} key={todo.id} />\n      ))}\n    </ul>\n    Tasks left: {todoList.unfinishedTodoCount}\n  </div>\n));\n\nconst TodoView = observer(({ todo }) => (\n  <li>\n    <input\n      type=\"checkbox\"\n      checked={todo.finished}\n      onClick={() => todo.toggle()}\n    />\n    {todo.title}\n  </li>\n));\n\nconst store = new TodoList([\n  new Todo(\"Get Coffee\"),\n  new Todo(\"Write simpler code\")\n]);\nrender(<TodoListView todoList={store} />, document.getElementById(\"root\"));\n"],"sourceRoot":""}